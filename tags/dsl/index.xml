<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>DSL on xiaoqiaotq</title><link>https://xiaoqiaotq.github.io/tags/dsl/</link><description>Recent content in DSL on xiaoqiaotq</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Sun, 08 Jan 2023 22:09:26 +0800</lastBuildDate><atom:link href="https://xiaoqiaotq.github.io/tags/dsl/index.xml" rel="self" type="application/rss+xml"/><item><title>Antlr4初学</title><link>https://xiaoqiaotq.github.io/posts/misc/antlr4%E5%88%9D%E5%AD%A6/</link><pubDate>Sun, 08 Jan 2023 22:09:26 +0800</pubDate><guid>https://xiaoqiaotq.github.io/posts/misc/antlr4%E5%88%9D%E5%AD%A6/</guid><description>背景 项目需要实现前端任意字段匹配查询，故需要配合表达式来生产sql，其实就是定义一种DSL，让前后端相互了解这个语意，调研后决定使用Antlr，相关介绍就不过分多说，直接看效果。语法参考Odata filter ，后期不满足可以直接修改g4文件
Odata filter示例 Country_Region_Code eq &amp;#39;ES&amp;#39; or Country_Region_Code eq &amp;#39;US&amp;#39; Country_Region_Code eq &amp;#39;ES&amp;#39; and Payment_Terms_Code eq &amp;#39;14 DAYS&amp;#39; Entry_No ge 610 Entry_No lt 610 VAT_Bus_Posting_Group ne &amp;#39;EXPORT&amp;#39; Odata.g4 grammar OData; /* * Parser Rules */ program: expression; expression: LP expression RP # Parenthesis | K_STARTSWITH LP column=column_name &amp;#39;,&amp;#39; value=TEXT RP # StartsWith | K_ENDSWITH LP column=column_name &amp;#39;,&amp;#39; value=TEXT RP # EndsWith | K_CONTAINS LP column=column_name &amp;#39;,&amp;#39; value=TEXT RP # Contains | column=column_name K_IN LP value=decimal_array RP # InDecimal | column=column_name K_IN LP value=string_array RP # InText | column=column_name compare=( Equal | NotEqual | GreaterThan | GreaterThanOrEqual | LessThan | LessThanOrEqual) value=decimal # CompareDecimal | column=column_name compare=( Equal | NotEqual | GreaterThan | GreaterThanOrEqual | LessThan | LessThanOrEqual) value=TEXT # CompareText | expression logic = (K_AND | K_OR) expression # Logic ; column_name : COLUMN_NAME | &amp;#39;[&amp;#39; column_name &amp;#39;]&amp;#39; ; string_array : TEXT (&amp;#39;,&amp;#39; TEXT)* ; decimal_array : NUMBER (&amp;#39;,&amp;#39; NUMBER)* ; text: TEXT; decimal : NUMBER ; /* * Lexer Rules */ K_IN: I N; K_AND: A N D; K_OR: O R; K_STARTSWITH: S T A R T S W I T H; K_ENDSWITH: E N D S W I T H; K_CONTAINS: C O N T A I N S; LP : &amp;#39;(&amp;#39;; RP : &amp;#39;)&amp;#39;; Equal: E Q; NotEqual: N E; GreaterThan: G T; GreaterThanOrEqual: G E; LessThan: L T; LessThanOrEqual: L E; COLUMN_NAME : VALID_ID_START VALID_ID_CHAR* ; TEXT :&amp;#39;&amp;#34;&amp;#39; .</description></item></channel></rss>