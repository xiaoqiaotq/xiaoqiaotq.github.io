[{"content":"codepush是微软一套热更新系统，托管部署资源如 react-native , cordova 等 CodePush-CLI 是热更新客户端工具，目前微软已废弃，建议使用AppCenter-CLI\nCordova 限制（只能更新静态资源，原生code不能更新） Any product changes which touch native code (e.g. upgrading Cordova versions, adding a new plugin) cannot be distributed via CodePush, and therefore, must be updated via the appropriate store(s).\nMainActivity 触发 webview 加载 file:///android_asset/www/index.html\ncode-push-cli 常用命令 #安装 最新为3.0 我们用2 yarn global add code-push-cli@2 code-push -h # 会打开浏览器 https://appcenter.ms/cli-login?hostname=CISZ03-0820 弹出token code-push login # admin 123456 code-push login https://code-push.xx.top/ code-push whoami # 创建app 默认创建两个deployment Production, Staging #code-push app add \u0026lt;appName\u0026gt; \u0026lt;os\u0026gt; \u0026lt;platform\u0026gt; code-push app add sankyu-test android cordova # 查看应用 code-push app ls code-push deployment ls sankyu-test -k # 查看deployment #code-push deployment history \u0026lt;appName\u0026gt; \u0026lt;deploymentName\u0026gt; [options] code-push deployment history sankyu-test Staging code-push deployment history sankyu-test Production # 发布 版本以config.xml version 为准,可以手动指定 # code-push release-cordova \u0026lt;appName\u0026gt; \u0026lt;platform\u0026gt; [options] code-push release-cordova sankyu-test android -d Staging -t 0.0.2 # 发布 ^0.0.1 quasar build -m android code-push release-cordova sankyu-test android -d Production -t \u0026#34;^0.0.1\u0026#34; 部署code-push-server https://github.com/lisong/code-push-server/blob/master/docker/README.md\ngit clone https://github.com/lisong/code-push-server.git cd code-push-server/docker vim docker-compose.yml # 替换ip :%s/YOU_MACHINE_IP/your ip/g 修改镜像为 panshx/code-push-server:latest 修改config.js中tokenSecret 可以打开连接https://www.grc.com/passwords.htm获取 63 random alpha-numeric characters类型的随机生成数作为密钥 可选修改存储 config.js common.storageType: 'oss' oss: { accessKeyId: \u0026quot;\u0026quot;, secretAccessKey: \u0026quot;\u0026quot;, endpoint: \u0026quot;https://oss-cn-shanghai.aliyuncs.com\u0026quot;, bucketName: \u0026quot;bucketName\u0026quot;, prefix: \u0026quot;\u0026quot;, // Key prefix in object key downloadUrl: \u0026quot;https://bucket.oss-cn-shanghai.aliyuncs.com/\u0026quot;, // binary files download host address. }, #启动 1. 启动redis 有就复用，没有单独起 docker run --name redis -v redisdata:/data -p 6379:6379 -d redis:4.0.11-alpine 2. 启动mysql，导入sql，会自动创建数据库，表 ./sql/codepush-all.sql:/docker-entrypoint-initdb.d/codepush-all.sql 3. 启动服务 docker-compose up // docker stack deploy -c docker-compose.yml code-push-server # 测试连通性 admin 123456 默认登录密码 curl -I http://your ip:3000/ docker-compose.yml 改写 version: \u0026quot;3.7\u0026quot; services: server: image: panshx/code-push-server:latest volumes: - data-storage:/data/storage - data-tmp:/data/tmp - ./config.js:/config.js environment: DOWNLOAD_URL: \u0026quot;http://YOU_MACHINE_IP:3000/download\u0026quot; MYSQL_HOST: \u0026quot;10.0.4.3\u0026quot; MYSQL_PORT: \u0026quot;3306\u0026quot; MYSQL_USERNAME: \u0026quot;codepush\u0026quot; MYSQL_PASSWORD: \u0026quot;123456\u0026quot; MYSQL_DATABASE: \u0026quot;codepush\u0026quot; STORAGE_DIR: \u0026quot;/data/storage\u0026quot; DATA_DIR: \u0026quot;/data/tmp\u0026quot; NODE_ENV: \u0026quot;production\u0026quot; CONFIG_FILE: \u0026quot;/config.js\u0026quot; REDIS_HOST: \u0026quot;10.0.4.3\u0026quot; REDIS_PORT: \u0026quot;6379\u0026quot; VIRTUAL_HOST: httpbin.xiaoqiaotq.top LETSENCRYPT_HOST: httpbin.xiaoqiaotq.top VIRTUAL_PORT: 3000 deploy: resources: limits: cpus: \u0026quot;2\u0026quot; memory: 1000M restart_policy: condition: on-failure ports: - \u0026quot;3000:3000\u0026quot; networks: - servernet networks: servernet: volumes: data-storage: data-tmp: 客户端接入 https://github.com/Microsoft/cordova-plugin-code-push\nhttps://www.itguliang.com/post/bdc17ac0.html\ncordova plugin add cordova-plugin-code-push@latest ### 修改config.xml \u0026lt;platform name=\u0026#34;android\u0026#34;\u0026gt; \u0026lt;allow-intent href=\u0026#34;market:*\u0026#34; /\u0026gt; \u0026lt;preference name=\u0026#34;CodePushDeploymentKey\u0026#34; value=\u0026#34;nVHPr6asLSusnWoLBNCSktk9FWbiqLF160UDgcc\u0026#34; /\u0026gt; \u0026lt;preference name=\u0026#34;CodePushServerUrl\u0026#34; value=\u0026#34;https://code-push.aa.top/\u0026#34; /\u0026gt; \u0026lt;/platform\u0026gt; ### 代码接入 codePush.sync(); 抓包 发版 code-push release-cordova wms-test android -d Staging -t 1.1.1\nPOST /apps/wms-test/deployments/Staging/release HTTP/1.1 Host: localhost:3000 Accept-Encoding: gzip, deflate User-Agent: node-superagent/3.8.3 X-CodePush-CLI-Version: 2.1.9 Accept: application/vnd.code-push.v2+json Authorization: Bearer tLDLTtCUSRYrO4P2BntrzPktkrgq4ksvOXqog X-CodePush-SDK-Version: 2.0.6 content-type: multipart/form-data; boundary=--------------------------641068731626182805276171 Content-Length: 931966 Connection: close ----------------------------641068731626182805276171 Content-Disposition: form-data; name=\u0026#34;package\u0026#34;; filename=\u0026#34;m6Xk8At6CX1ZRtH.zip\u0026#34; Content-Type: application/zip PK..........GV............ ...www/.DS_Store..A .@......6.l....H...D. ...w..:Z..W.\u0026amp;A.......{..f.\u0026lt;.Xun6...#...%.3\u0026#34;.l~..=v]..}......o.8...B.!.........!..!.|(...... .E9.......q ..9.....!.....0~........~.B,.4.....d./.X0.m.. ----------------------------641068731626182805276171 Content-Disposition: form-data; name=\u0026#34;packageInfo\u0026#34; {\u0026#34;description\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;isDisabled\u0026#34;:false,\u0026#34;isMandatory\u0026#34;:false,\u0026#34;rollout\u0026#34;:100,\u0026#34;appVersion\u0026#34;:\u0026#34;1.1.1\u0026#34;} ----------------------------641068731626182805276171-- HTTP/1.1 200 OK X-DNS-Prefetch-Control: off X-Frame-Options: SAMEORIGIN Strict-Transport-Security: max-age=15552000; includeSubDomains X-Download-Options: noopen X-Content-Type-Options: nosniff X-XSS-Protection: 1; mode=block Access-Control-Allow-Origin: * Access-Control-Allow-Headers: Origin, X-Requested-With, Content-Type, Accept, Authorization, X-CodePush-Plugin-Version, X-CodePush-Plugin-Name, X-CodePush-SDK-Version Access-Control-Allow-Methods: PUT,POST,GET,PATCH,DELETE,OPTIONS Content-Type: text/html; charset=utf-8 Content-Length: 18 ETag: W/\u0026#34;12-VQcfpGWTIWZxIW5CJEu508IDMlk\u0026#34; Date: Tue, 07 Feb 2023 08:35:40 GMT Connection: close {\u0026#34;msg\u0026#34;: \u0026#34;succeed\u0026#34;} 代码更新检查 codepush.sync()调用 http://localhost:3000/v0.1/public/codepush/update_check?deployment_key=K4TwqkWsAnkWjBIHaOijClKrMygF4ksvOXqog\u0026amp;app_version=1.3.4\u0026amp;package_hash=f7d21597ae65922062c71f7bac4fc7deef60c7775b82ede0f004f8a336dc73d9 # 有更新返回示例(返回最新版本) { \u0026#34;update_info\u0026#34;:{ \u0026#34;download_url\u0026#34;:\u0026#34;https://aaa.oss-cn-shanghai.aliyuncs.com//FnsxIg4pOx_TAzuvnlognY0qXpsS\u0026#34;, \u0026#34;description\u0026#34;:\u0026#34;\u0026#34;, \u0026#34;is_available\u0026#34;:true, \u0026#34;is_disabled\u0026#34;:false, \u0026#34;target_binary_range\u0026#34;:\u0026#34;1.0.0\u0026#34;, \u0026#34;label\u0026#34;:\u0026#34;v6\u0026#34;, \u0026#34;package_hash\u0026#34;:\u0026#34;827ec4301e2fbc59e297ac05ed26465e5449492d0391219dbc6bcb6f3c2c6e44\u0026#34;, \u0026#34;package_size\u0026#34;:931523, \u0026#34;should_run_binary_version\u0026#34;:false, \u0026#34;update_app_version\u0026#34;:false, \u0026#34;is_mandatory\u0026#34;:false } } # hash一致，返回空的update_info {\u0026#34;update_info\u0026#34;:{\u0026#34;download_url\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;description\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;is_available\u0026#34;:false,\u0026#34;is_disabled\u0026#34;:true,\u0026#34;target_binary_range\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;label\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;package_hash\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;package_size\u0026#34;:0,\u0026#34;should_run_binary_version\u0026#34;:false,\u0026#34;update_app_version\u0026#34;:false,\u0026#34;is_mandatory\u0026#34;:false}} 困扰的问题 app_version不会变，除非在config.xml指定新版version，此时需要重新打apk包，热更新就失去价值了，热更新只会更新label（v2 数字累加）\n源码分析 参考： https://www.itguliang.com/post/bdc17ac0.html https://github.com/lisong/code-push-server ","permalink":"https://xiaoqiaotq.github.io/posts/%E5%89%8D%E7%AB%AF/codepush%E7%83%AD%E6%9B%B4%E6%96%B0/","summary":"codepush是微软一套热更新系统，托管部署资源如 react-native , cordova 等 CodePush-CLI 是热更新客户端工具，目前微软已废弃，建议使用AppCenter-CLI\nCordova 限制（只能更新静态资源，原生code不能更新） Any product changes which touch native code (e.g. upgrading Cordova versions, adding a new plugin) cannot be distributed via CodePush, and therefore, must be updated via the appropriate store(s).\nMainActivity 触发 webview 加载 file:///android_asset/www/index.html\ncode-push-cli 常用命令 #安装 最新为3.0 我们用2 yarn global add code-push-cli@2 code-push -h # 会打开浏览器 https://appcenter.ms/cli-login?hostname=CISZ03-0820 弹出token code-push login # admin 123456 code-push login https://code-push.xx.top/ code-push whoami # 创建app 默认创建两个deployment Production, Staging #code-push app add \u0026lt;appName\u0026gt; \u0026lt;os\u0026gt; \u0026lt;platform\u0026gt; code-push app add sankyu-test android cordova # 查看应用 code-push app ls code-push deployment ls sankyu-test -k # 查看deployment #code-push deployment history \u0026lt;appName\u0026gt; \u0026lt;deploymentName\u0026gt; [options] code-push deployment history sankyu-test Staging code-push deployment history sankyu-test Production # 发布 版本以config.","title":"codepush热更新"},{"content":"背景 项目需要实现前端任意字段匹配查询，故需要配合表达式来生产sql，其实就是定义一种DSL，让前后端相互了解这个语意，调研后决定使用Antlr，相关介绍就不过分多说，直接看效果。语法参考Odata filter ，后期不满足可以直接修改g4文件\nOdata filter示例 Country_Region_Code eq \u0026#39;ES\u0026#39; or Country_Region_Code eq \u0026#39;US\u0026#39; Country_Region_Code eq \u0026#39;ES\u0026#39; and Payment_Terms_Code eq \u0026#39;14 DAYS\u0026#39; Entry_No ge 610 Entry_No lt 610 VAT_Bus_Posting_Group ne \u0026#39;EXPORT\u0026#39; Odata.g4 grammar OData; /* * Parser Rules */ program: expression; expression: LP expression RP # Parenthesis | K_STARTSWITH LP column=column_name \u0026#39;,\u0026#39; value=TEXT RP # StartsWith | K_ENDSWITH LP column=column_name \u0026#39;,\u0026#39; value=TEXT RP # EndsWith | K_CONTAINS LP column=column_name \u0026#39;,\u0026#39; value=TEXT RP # Contains | column=column_name K_IN LP value=decimal_array RP # InDecimal | column=column_name K_IN LP value=string_array RP # InText | column=column_name compare=( Equal | NotEqual | GreaterThan | GreaterThanOrEqual | LessThan | LessThanOrEqual) value=decimal # CompareDecimal | column=column_name compare=( Equal | NotEqual | GreaterThan | GreaterThanOrEqual | LessThan | LessThanOrEqual) value=TEXT # CompareText | expression logic = (K_AND | K_OR) expression\t# Logic ; column_name : COLUMN_NAME | \u0026#39;[\u0026#39; column_name \u0026#39;]\u0026#39; ; string_array : TEXT (\u0026#39;,\u0026#39; TEXT)* ; decimal_array : NUMBER (\u0026#39;,\u0026#39; NUMBER)* ; text: TEXT; decimal : NUMBER ; /* * Lexer Rules */ K_IN: I N; K_AND: A N D; K_OR: O R; K_STARTSWITH: S T A R T S W I T H; K_ENDSWITH: E N D S W I T H; K_CONTAINS: C O N T A I N S; LP : \u0026#39;(\u0026#39;; RP : \u0026#39;)\u0026#39;; Equal: E Q; NotEqual: N E; GreaterThan: G T; GreaterThanOrEqual: G E; LessThan: L T; LessThanOrEqual: L E; COLUMN_NAME : VALID_ID_START VALID_ID_CHAR* ; TEXT :\u0026#39;\u0026#34;\u0026#39; .*? \u0026#39;\u0026#34;\u0026#39; |\u0026#39;\\\u0026#39;\u0026#39; .*? \u0026#39;\\\u0026#39;\u0026#39; ; NUMBER : (SIGN)? UNSIGNED_INTEGER+ | (SIGN)? UNSIGNED_INTEGER+ (\u0026#39;.\u0026#39; UNSIGNED_INTEGER+)? ; fragment UNSIGNED_INTEGER : (\u0026#39;0\u0026#39; .. \u0026#39;9\u0026#39;) ; fragment SIGN : (\u0026#39;+\u0026#39; | \u0026#39;-\u0026#39;) ; fragment VALID_ID_START : LOWERCASE | UPERCASE | \u0026#39;_\u0026#39; ; fragment VALID_ID_CHAR : VALID_ID_START | (LOWERCASE | UPERCASE | DIGIT ) ; fragment LOWERCASE: [a-z]; fragment UPERCASE: [A-Z]; fragment DIGIT: [0-9]; fragment DIGITS: DIGIT+; fragment A: [aA]; fragment B: [bB]; fragment C: [cC]; fragment D: [dD]; fragment E: [eE]; fragment F: [fF]; fragment G: [gG]; fragment H: [hH]; fragment I: [iI]; fragment J: [jJ]; fragment K: [kK]; fragment L: [lL]; fragment M: [mM]; fragment N: [nN]; fragment O: [oO]; fragment P: [pP]; fragment Q: [qQ]; fragment R: [rR]; fragment S: [sS]; fragment T: [tT]; fragment U: [uU]; fragment V: [vV]; fragment W: [wW]; fragment X: [xX]; fragment Y: [yY]; fragment Z: [zZ]; SPACES: [ \\u000B\\t\\r\\n] -\u0026gt; channel(HIDDEN); 前端 UI npm包 npm i antlr4@4.11.0\nVisitor（DSL to js） // This class defines a complete generic visitor for a parse tree produced by ODataParser. import ODataParser from \u0026#34;@/project/antlr/ODataParser\u0026#34;; import ODataVisitor from \u0026#34;@/project/antlr/ODataVisitor\u0026#34;; export default class ODataSqlVisitor extends ODataVisitor { filterPair={ logic:\u0026#39;AND\u0026#39;, pairs:[] } getFilterPair(){ return this.filterPair } // Visit a parse tree produced by ODataParser#CompareText. visitCompareText(ctx) { if (ctx.exception!=null) { throw ctx.exception; } const column = this.visit(ctx.column); const decimal= ctx.value.text.replace(/^\u0026#34;(.*)\u0026#34;$/,\u0026#34;$1\u0026#34;) const operator = this.getSQLOperator(ctx.compare.type); const pair= {column ,value: decimal,operator}; this.filterPair.pairs.push(pair) return pair; } // Visit a parse tree produced by ODataParser#CompareDecimal. visitCompareDecimal(ctx) { if (ctx.exception!=null) { throw ctx.exception; } const column = this.visit(ctx.column); const decimal = this.visit(ctx.value); const operator = this.getSQLOperator(ctx.compare.type); // return column + \u0026#34; \u0026#34; + operator + \u0026#34; \u0026#34; + decimal; const pair= {column ,value: decimal,operator}; this.filterPair.pairs.push(pair) return pair; } // Visit a parse tree produced by ODataParser#Logic. visitLogic(ctx){ if(ctx.exception!=null) { throw ctx.exception; } const left = this.visit(ctx.expression(0)); const right = this.visit(ctx.expression(1)); if (right == null){ return null; } if (ctx.logic.type== ODataParser.K_AND) { this.filterPair.logic = \u0026#34;AND\u0026#34;; // return left + \u0026#34; and \u0026#34; + right; return null; }else { this.filterPair.logic = \u0026#34;OR\u0026#34;; // return left + \u0026#34; or \u0026#34; + right; return null; } } // Visit a parse tree produced by ODataParser#column_name. visitColumn_name(ctx) { return ctx.getText(); } // Visit a parse tree produced by ODataParser#decimal. visitDecimal(ctx) { return ctx.getText(); } // visitText(ctx) { // const aa= ctx.getText().replace(/^\u0026#34;(.*)\u0026#34;$/,\u0026#34;$1\u0026#34;) // console.log(aa,ctx.getText()) // debugger // return aa // } getSQLOperator(compare) { let operator = null; switch (compare) { case ODataParser.Equal: operator = \u0026#34;=\u0026#34;; break; case ODataParser.NotEqual: operator = \u0026#34;\u0026lt;\u0026gt;\u0026#34;; break; case ODataParser.GreaterThan: operator = \u0026#34;\u0026gt;\u0026#34;; break; case ODataParser.GreaterThanOrEqual: operator = \u0026#34;\u0026gt;=\u0026#34;; break; case ODataParser.LessThan: operator = \u0026#34;\u0026lt;\u0026#34;; break; case ODataParser.LessThanOrEqual: operator = \u0026#34;\u0026lt;=\u0026#34;; break; } return operator; } } 后端 maven坐标 \u0026lt;!-- https://mvnrepository.com/artifact/org.antlr/antlr4-runtime --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.antlr\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;antlr4-runtime\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;4.11.1\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; Visitor（DSL to sql） 和工具类 package com.sankyu.wms.antlr; import com.google.common.base.CaseFormat; public class ODataSqlVisitor extends ODataBaseVisitor { @Override public Object visitLogic(ODataParser.LogicContext ctx) { if (ctx.exception!=null) { throw ctx.exception; } String left = (String) visit(ctx.expression(0)); String right = (String) visit(ctx.expression(1)); if (right == null){ return null; } if (ctx.logic.getType()==ODataParser.K_AND) { return left + \u0026#34; and \u0026#34; + right; }else { return left + \u0026#34; or \u0026#34; + right; } } @Override public Object visitColumn_name(ODataParser.Column_nameContext ctx) { return CaseFormat.UPPER_CAMEL.to(CaseFormat.LOWER_UNDERSCORE, ctx.getText()); } @Override public Object visitDecimal(ODataParser.DecimalContext ctx) { return ctx.getText(); } // @Override // public Object visitText(ODataParser.TextContext ctx) { // return ctx.getText(); // } @Override public Object visitCompareDecimal(ODataParser.CompareDecimalContext ctx) { if (ctx.exception!=null) { throw ctx.exception; } String column = (String)visit(ctx.column); String decimal = (String)visit(ctx.value); String operator = getSQLOperator(ctx.compare.getType()); return column + \u0026#34; \u0026#34; + operator + \u0026#34; \u0026#34; + decimal; } @Override public Object visitCompareText(ODataParser.CompareTextContext ctx) { if (ctx.exception!=null) { throw ctx.exception; } String column = (String)visit(ctx.column); String decimal = ctx.value.getText(); String operator = getSQLOperator(ctx.compare.getType()); return column + \u0026#34; \u0026#34; + operator + \u0026#34; \u0026#34; + decimal; } private String getSQLOperator(Integer compare) { String operator = null; switch (compare) { case ODataParser.Equal: operator = \u0026#34;=\u0026#34;; break; case ODataParser.NotEqual: operator = \u0026#34;\u0026lt;\u0026gt;\u0026#34;; break; case ODataParser.GreaterThan: operator = \u0026#34;\u0026gt;\u0026#34;; break; case ODataParser.GreaterThanOrEqual: operator = \u0026#34;\u0026gt;=\u0026#34;; break; case ODataParser.LessThan: operator = \u0026#34;\u0026lt;\u0026#34;; break; case ODataParser.LessThanOrEqual: operator = \u0026#34;\u0026lt;=\u0026#34;; break; } return operator; } } 参考 https://olingo.apache.org/doc/odata2/tutorials/Olingo_Tutorial_AdvancedRead_FilterVisitor.html https://blog.51cto.com/u_15067225/2603738 https://learn.microsoft.com/en-us/dynamics-nav/using-filter-expressions-in-odata-uris https://github.com/huazailmh/ODataFilterParser/blob/master/Parser/ODataFilterVisitor.cs ","permalink":"https://xiaoqiaotq.github.io/posts/misc/antlr4%E5%88%9D%E5%AD%A6/","summary":"背景 项目需要实现前端任意字段匹配查询，故需要配合表达式来生产sql，其实就是定义一种DSL，让前后端相互了解这个语意，调研后决定使用Antlr，相关介绍就不过分多说，直接看效果。语法参考Odata filter ，后期不满足可以直接修改g4文件\nOdata filter示例 Country_Region_Code eq \u0026#39;ES\u0026#39; or Country_Region_Code eq \u0026#39;US\u0026#39; Country_Region_Code eq \u0026#39;ES\u0026#39; and Payment_Terms_Code eq \u0026#39;14 DAYS\u0026#39; Entry_No ge 610 Entry_No lt 610 VAT_Bus_Posting_Group ne \u0026#39;EXPORT\u0026#39; Odata.g4 grammar OData; /* * Parser Rules */ program: expression; expression: LP expression RP # Parenthesis | K_STARTSWITH LP column=column_name \u0026#39;,\u0026#39; value=TEXT RP # StartsWith | K_ENDSWITH LP column=column_name \u0026#39;,\u0026#39; value=TEXT RP # EndsWith | K_CONTAINS LP column=column_name \u0026#39;,\u0026#39; value=TEXT RP # Contains | column=column_name K_IN LP value=decimal_array RP # InDecimal | column=column_name K_IN LP value=string_array RP # InText | column=column_name compare=( Equal | NotEqual | GreaterThan | GreaterThanOrEqual | LessThan | LessThanOrEqual) value=decimal # CompareDecimal | column=column_name compare=( Equal | NotEqual | GreaterThan | GreaterThanOrEqual | LessThan | LessThanOrEqual) value=TEXT # CompareText | expression logic = (K_AND | K_OR) expression\t# Logic ; column_name : COLUMN_NAME | \u0026#39;[\u0026#39; column_name \u0026#39;]\u0026#39; ; string_array : TEXT (\u0026#39;,\u0026#39; TEXT)* ; decimal_array : NUMBER (\u0026#39;,\u0026#39; NUMBER)* ; text: TEXT; decimal : NUMBER ; /* * Lexer Rules */ K_IN: I N; K_AND: A N D; K_OR: O R; K_STARTSWITH: S T A R T S W I T H; K_ENDSWITH: E N D S W I T H; K_CONTAINS: C O N T A I N S; LP : \u0026#39;(\u0026#39;; RP : \u0026#39;)\u0026#39;; Equal: E Q; NotEqual: N E; GreaterThan: G T; GreaterThanOrEqual: G E; LessThan: L T; LessThanOrEqual: L E; COLUMN_NAME : VALID_ID_START VALID_ID_CHAR* ; TEXT :\u0026#39;\u0026#34;\u0026#39; .","title":"Antlr4初学"},{"content":"问题 今天遇到个问题，Mac m1 上拉取之前java构建的程序发现跑不起来，第一反应arm平台不兼容之前在x86架构下构建的镜像。 现如今云厂商好多服务器都是arm架构的，加上window11都支持arm架构了（Windows on ARM），arm以后会越来越频繁使用了。 这时就得祭出docker出的利器 buildx，可以一次构建多个平台的镜像。废话不多，开搞。。\nbuildx其实是个容器工具 moby/buildkit:buildx-stable-1 # Create a new builder ➜ ~ docker buildx create --name mybuilder --bootstrap --use # 查看builder ➜ ~ docker buildx inspect mybuilder Name: mybuilder Driver: docker-container Nodes: Name: mybuilder0 Endpoint: unix:///var/run/docker.sock Status: running Buildkit: v0.11.2 Platforms: linux/arm64, linux/amd64, linux/amd64/v2, linux/riscv64, linux/ppc64le, linux/s390x, linux/386, linux/mips64le, linux/mips64, linux/arm/v7, linux/arm/v6 构建 # 一条命令搞定，会pudh到registry 区别于常规build ➜ ~ docker buildx build --platform linux/arm64/v8,linux/amd64 -t registry.cn-hangzhou.aliyuncs.com/xiaoqioatq2/aa:0.2 --push back # 常规build 不push ➜ ~ docker build -t registry.cn-hangzhou.aliyuncs.com/xiaoqioatq2/aa:0.1 back 查看registry构建成功 ➜ ~ docker buildx imagetools inspect registry.cn-hangzhou.aliyuncs.com/xiaoqioatq2/aa:0.2 Name: registry.cn-hangzhou.aliyuncs.com/xiaoqioatq2/aa:0.2 MediaType: application/vnd.docker.distribution.manifest.list.v2+json Digest: sha256:d1bce5ac3d722d5839417ba1524c6559db491569f900f20c8dd080f03e931bf9 Manifests: Name: registry.cn-hangzhou.aliyuncs.com/xiaoqioatq2/aa:0.2@sha256:3e4d09f006d30c2644783a84abe99d22631930fb0a912bd291d4820d5eb328ac MediaType: application/vnd.docker.distribution.manifest.v2+json Platform: linux/arm64 Name: registry.cn-hangzhou.aliyuncs.com/xiaoqioatq2/aa:0.2@sha256:f1e39a33c800f3aab5b2e9de497871ae1a5b3e1b918b57bd9724d2b795e8b49f MediaType: application/vnd.docker.distribution.manifest.v2+json Platform: linux/amd64 客户端测试 会自动拉取自己平台的镜像 Apple M1 （ARM64） ➜ ~ docker pull registry.cn-hangzhou.aliyuncs.com/xiaoqioatq2/aa:0.2 0.2: Pulling from xiaoqioatq2/aa 0362ad1dd800: Already exists 571218f61883: Already exists abe576d65b4c: Already exists 88e233291907: Pull complete 6f085c5d0e88: Pull complete c740effa2ce7: Pull complete Digest: sha256:d1bce5ac3d722d5839417ba1524c6559db491569f900f20c8dd080f03e931bf9 Status: Downloaded newer image for registry.cn-hangzhou.aliyuncs.com/xiaoqioatq2/aa:0.2 registry.cn-hangzhou.aliyuncs.com/xiaoqioatq2/aa:0.2 ➜ ~ docker image inspect registry.cn-hangzhou.aliyuncs.com/xiaoqioatq2/aa:0.2 --format \u0026#39;{{.Os}}/{{.Architecture}}\u0026#39; linux/arm64 Centos （AMD64） [root@VM-4-3-centos ~]# docker pull registry.cn-hangzhou.aliyuncs.com/xiaoqioatq2/aa:0.2 0.2: Pulling from xiaoqioatq2/aa e7c96db7181b: Already exists f910a506b6cb: Already exists c2274a1a0e27: Already exists 5023d05d0236: Pull complete 65e39c71f562: Pull complete c740effa2ce7: Pull complete Digest: sha256:d1bce5ac3d722d5839417ba1524c6559db491569f900f20c8dd080f03e931bf9 Status: Downloaded newer image for registry.cn-hangzhou.aliyuncs.com/xiaoqioatq2/aa:0.2 registry.cn-hangzhou.aliyuncs.com/xiaoqioatq2/aa:0.2 [root@VM-4-3-centos ~]# docker image inspect registry.cn-hangzhou.aliyuncs.com/xiaoqioatq2/aa:0.2 --format \u0026#39;{{.Os}}/{{.Architecture}}\u0026#39; linux/amd64 发现的问题 镜像摘要混乱 docker cli 拉取镜像时digest是manifest总的摘要，不是各自平台的digest，也有人提了issue，期待早日解决。\nDocker hub 只显示各个平台的digest，不显示总digest。 阿里云registry 只显示了amd64平台的digest 会误导。 多平台构建速度比较慢，后期考虑用github action来构建\n参考： https://www.thorsten-hans.com/how-to-build-multi-arch-docker-images-with-ease/ https://www.docker.com/blog/faster-multi-platform-builds-dockerfile-cross-compilation-guide/ ","permalink":"https://xiaoqiaotq.github.io/posts/linux/docker%E5%A4%9A%E5%B9%B3%E5%8F%B0%E6%9E%84%E5%BB%BA/","summary":"问题 今天遇到个问题，Mac m1 上拉取之前java构建的程序发现跑不起来，第一反应arm平台不兼容之前在x86架构下构建的镜像。 现如今云厂商好多服务器都是arm架构的，加上window11都支持arm架构了（Windows on ARM），arm以后会越来越频繁使用了。 这时就得祭出docker出的利器 buildx，可以一次构建多个平台的镜像。废话不多，开搞。。\nbuildx其实是个容器工具 moby/buildkit:buildx-stable-1 # Create a new builder ➜ ~ docker buildx create --name mybuilder --bootstrap --use # 查看builder ➜ ~ docker buildx inspect mybuilder Name: mybuilder Driver: docker-container Nodes: Name: mybuilder0 Endpoint: unix:///var/run/docker.sock Status: running Buildkit: v0.11.2 Platforms: linux/arm64, linux/amd64, linux/amd64/v2, linux/riscv64, linux/ppc64le, linux/s390x, linux/386, linux/mips64le, linux/mips64, linux/arm/v7, linux/arm/v6 构建 # 一条命令搞定，会pudh到registry 区别于常规build ➜ ~ docker buildx build --platform linux/arm64/v8,linux/amd64 -t registry.","title":"Docker多平台构建"},{"content":"致敬每一个扛住了生活的平凡人 ","permalink":"https://xiaoqiaotq.github.io/posts/misc/%E7%BD%91%E6%98%932022%E5%B9%B4%E5%BA%A6%E7%9B%98%E7%82%B9/","summary":"致敬每一个扛住了生活的平凡人 ","title":"网易2022年度盘点"},{"content":"背景 家里路由器信号太差了想换一台，真好看到拼多多有活动（360RMB）就入手了一台，顺便手痒想刷下机，看看有什么好玩的软件和应用。\n配置 红米 AX6000 搭载的是 MTK 2021 年发布的 Filogic 830 平台，具体型号是 mt7986a，四核 ARM A53 的架构， 512M 内存和 128M 闪存\n刷机openwrt https://openwrt.org/toh/xiaomi/redmi_ax6000\n官方固件还没有release 先不刷机了 https://downloads.openwrt.org/snapshots/targets/mediatek/filogic/\n先贴一个官方刷机教材，等release再回头看看 https://github.com/openwrt/openwrt/pull/11115\nGain ssh access (see the link: https://openwrt.org/toh/xiaomi/redmi_ax6000#installation) Check current stock system COMMAND: cat /proc/cmdline sample OUTPUT: console=ttyS0,115200n1 loglevel=8 firmware=1 uart_en=1 if firmware=1, current system is ubi1 if firmware=0, current system is ubi0 Setup nvram If the current system is ubi1, please set it up so that the next time it will boot from ubi: nvram set boot_wait=on nvram set uart_en=1 nvram set flag_boot_rootfs=0 nvram set flag_last_success=0 nvram set flag_boot_success=1 nvram set flag_try_sys1_failed=0 nvram set flag_try_sys2_failed=0 nvram commit If the current system is ubi, please set it up so that the next time it will boot from ubi1:\nnvram set boot_wait=on nvram set uart_en=1 nvram set flag_boot_rootfs=1 nvram set flag_last_success=1 nvram set flag_boot_success=1 nvram set flag_try_sys1_failed=0 nvram set flag_try_sys2_failed=0 nvram commit Flash initramfs-factory.ubi If the firmware=1, the current system is using ubi1. In this case, flash the image to ubi: ubiformat /dev/mtd8 -y -f /tmp/initramfs-factory.ubi If the firmware=0, the current system is using ubi. In this case, flash the image to ubi1: ubiformat /dev/mtd9 -y -f /tmp/initramfs-factory.ubi After rebooting, the system should now boot into the openwrt initramfs system. Flash the squashfs-sysupgrade.bin via ssh sysupgrade -n /tmp/squashfs-sysupgrade.bin or you could do sysupgrade via luci Done.\ngithub issue追踪进度 https://github.com/openwrt/openwrt/issues?q=11115\n关于AX6000的刷机讨论 https://forum.openwrt.org/t/add-openwrt-support-for-xiaomi-redmi-ax6000/125008/378\n小米官方固件地址和版本 https://www.miwifi.com/miwifi_download.html 1.0.48 下载地址 https://cdn.cnbj1.fds.api.mi-img.com/xiaoqiang/rom/rb06/miwifi_rb06_firmware_847e9_1.0.48.bin\n","permalink":"https://xiaoqiaotq.github.io/posts/linux/%E7%BA%A2%E7%B1%B3ax6000%E5%88%B7%E6%9C%BA/","summary":"背景 家里路由器信号太差了想换一台，真好看到拼多多有活动（360RMB）就入手了一台，顺便手痒想刷下机，看看有什么好玩的软件和应用。\n配置 红米 AX6000 搭载的是 MTK 2021 年发布的 Filogic 830 平台，具体型号是 mt7986a，四核 ARM A53 的架构， 512M 内存和 128M 闪存\n刷机openwrt https://openwrt.org/toh/xiaomi/redmi_ax6000\n官方固件还没有release 先不刷机了 https://downloads.openwrt.org/snapshots/targets/mediatek/filogic/\n先贴一个官方刷机教材，等release再回头看看 https://github.com/openwrt/openwrt/pull/11115\nGain ssh access (see the link: https://openwrt.org/toh/xiaomi/redmi_ax6000#installation) Check current stock system COMMAND: cat /proc/cmdline sample OUTPUT: console=ttyS0,115200n1 loglevel=8 firmware=1 uart_en=1 if firmware=1, current system is ubi1 if firmware=0, current system is ubi0 Setup nvram If the current system is ubi1, please set it up so that the next time it will boot from ubi: nvram set boot_wait=on nvram set uart_en=1 nvram set flag_boot_rootfs=0 nvram set flag_last_success=0 nvram set flag_boot_success=1 nvram set flag_try_sys1_failed=0 nvram set flag_try_sys2_failed=0 nvram commit If the current system is ubi, please set it up so that the next time it will boot from ubi1:","title":"红米Ax6000刷机"},{"content":"https://wsgzao.github.io/post/lrzsz/\nhttps://gist.github.com/meowoodie/4bcf6d6ae81727b618bf\nlrzsz 客户端 服务端都得安装\n# 安装本地 默认装在/opt/homebrew/bin 目录 brew install lrzsz # 在 / usr/loal/bin 目录下创建两个文件 cd /usr/local/bin wget https://raw.githubusercontent.com/RobberPhex/iterm2-zmodem/master/iterm2-recv-zmodem.sh wget https://raw.githubusercontent.com/RobberPhex/iterm2-zmodem/master/iterm2-send-zmodem.sh # 赋予这两个文件可执行权限 chmod 777 /usr/local/bin/iterm2-* # 配置item 见下图 Perference-\u0026gt; Profiles -\u0026gt; Default -\u0026gt; Advanced -\u0026gt; Triggers 的 Edit 按钮， Regular expression: rz waiting to receive.\\*\\*B0100 Action: Run Silent Coprocess Parameters: /usr/local/bin/iterm2-send-zmodem.sh Instant: checked Regular expression: \\*\\*B00000000000000 Action: Run Silent Coprocess Parameters: /usr/local/bin/iterm2-recv-zmodem.sh Instant: checked 改脚本sh /usr/local/bin to /opt/homebrew/bin/ ","permalink":"https://xiaoqiaotq.github.io/posts/linux/iterm_lrzsz/","summary":"https://wsgzao.github.io/post/lrzsz/\nhttps://gist.github.com/meowoodie/4bcf6d6ae81727b618bf\nlrzsz 客户端 服务端都得安装\n# 安装本地 默认装在/opt/homebrew/bin 目录 brew install lrzsz # 在 / usr/loal/bin 目录下创建两个文件 cd /usr/local/bin wget https://raw.githubusercontent.com/RobberPhex/iterm2-zmodem/master/iterm2-recv-zmodem.sh wget https://raw.githubusercontent.com/RobberPhex/iterm2-zmodem/master/iterm2-send-zmodem.sh # 赋予这两个文件可执行权限 chmod 777 /usr/local/bin/iterm2-* # 配置item 见下图 Perference-\u0026gt; Profiles -\u0026gt; Default -\u0026gt; Advanced -\u0026gt; Triggers 的 Edit 按钮， Regular expression: rz waiting to receive.\\*\\*B0100 Action: Run Silent Coprocess Parameters: /usr/local/bin/iterm2-send-zmodem.sh Instant: checked Regular expression: \\*\\*B00000000000000 Action: Run Silent Coprocess Parameters: /usr/local/bin/iterm2-recv-zmodem.sh Instant: checked 改脚本sh /usr/local/bin to /opt/homebrew/bin/ ","title":"Iterm lrzsz"},{"content":"微信支付 https://pay.weixin.qq.com/wiki/doc/api/jsapi.php?chapter=9_4\nhttps://github.com/Wechat-Group/WxJava\nhttps://pay.weixin.qq.com/wiki/doc/api/wxa/wxa_api.php?chapter=2_2\n微信平台介绍：\n公众号平台 商户平台 开放平台 支付产品名字变更：\n公众号支付-变更为-JSAPI支付。 微信浏览器 扫码支付-变更为-Native支付 系统按微信支付协议生成支付二维码，非移动支付 刷卡支付-变更为-付款码支付 线下收银 APP支付。移动端sdk H5支付 移动浏览器，区分不同微信浏览器 小程序支付 小程序环境中支付 其他待应用 企业付款接口 ？ 付款到零钱-商户 付款到银行卡-商户 电子发票 合单支付 报关 https://api.mch.weixin.qq.com/v3/refund/domestic/refunds\n疑问 商户证书 vs 平台证书 （可以理解客户端和服务端） 证书过期问题（商户和平台），支付宝有提醒，微信无，过期需要开发手动替换 支付宝支付 https://opendocs.alipay.com/open/204/01dcc0?ref=api\n开放平台\nAlipayConfig\nCN=Ant Financial Certification Authority Class 1 R1, OU=Certification Authority, O=Ant Financial, C=CN CN=2088421377101215-2021002127627083, OU=Alipay, O=鸿海（苏州）食品科技股份有限公司, C=CN\nCN=支付宝(中国)网络技术有限公司-2088421377101215, OU=Alipay, O=鸿海（苏州）食品科技股份有限公司, C=CN CN=Ant Financial Certification Authority Class 2 R1, OU=Certification Authority, O=Ant Financial, C=CN CN=Ant Financial Certification Authority R1, OU=Certification Authority, O=Ant Financial, C=CN\nsignatuere alg:SHA384withECDSA publickey : EC CN=Ant Financial Certification Authority E1, OU=Certification Authority, O=Ant Financial, C=CN\nsignatuere alg:SHA256withRSA publicKey: RSA (4,096 bits) CN=Ant Financial Certification Authority R1, OU=Certification Authority, O=Ant Financial, C=CN\nsignatuere alg:SHA1withRSA publicKey: RSA(2048) CN=iTrusChina Class 2 Root CA - G3, OU=China Trust Network, O=iTrusChina, C=CN\n签名主要包含两个过程：摘要和非对称加密，首先对需要签名的数据做摘要（类似于常见的MD5）后得到摘要结果，然后通过签名者的私钥对摘要结果进行非对称加密即可得到签名结果。\nRSA2(SHA256WithRSA):（强烈推荐使用），强制要求RSA密钥的长度至少为2048. RSA(SHA1WithRSA):对RSA密钥的长度不限制，推荐使用2048位以上\nbiz_content -\u0026gt; {\u0026#34;out_request_no\u0026#34;:\u0026#34;HZ01RF003\u0026#34;,\u0026#34;out_trade_no\u0026#34;:\u0026#34;DH-O-2022-12-08-978069\u0026#34;,\u0026#34;refund_amount\u0026#34;:\u0026#34;0.01\u0026#34;,\u0026#34;refund_reason\u0026#34;:\u0026#34;不想要了\u0026#34;} { \u0026#34;alipay_trade_refund_response\u0026#34;: { \u0026#34;code\u0026#34;: \u0026#34;10000\u0026#34;, \u0026#34;msg\u0026#34;: \u0026#34;Success\u0026#34;, \u0026#34;buyer_logon_id\u0026#34;: \u0026#34;xia***@gmail.com\u0026#34;, \u0026#34;buyer_user_id\u0026#34;: \u0026#34;2088202345875734\u0026#34;, \u0026#34;fund_change\u0026#34;: \u0026#34;Y\u0026#34;, \u0026#34;gmt_refund_pay\u0026#34;: \u0026#34;2022-12-10 14:21:19\u0026#34;, \u0026#34;out_trade_no\u0026#34;: \u0026#34;DH-O-2022-12-08-978069\u0026#34;, \u0026#34;refund_fee\u0026#34;: \u0026#34;0.02\u0026#34;, \u0026#34;send_back_fee\u0026#34;: \u0026#34;0.00\u0026#34;, \u0026#34;trade_no\u0026#34;: \u0026#34;2022121022001475731434706311\u0026#34; }, \u0026#34;alipay_cert_sn\u0026#34;: \u0026#34;421f39ba4d8149cde08b15a426a12734\u0026#34;, \u0026#34;sign\u0026#34;: \u0026#34;C1tH+ax0yAMdWHNcBiHi7BLjHeNttrBA4X3hsgoftsQrrTvQogL2t/ZBS+wB8iuwfPddqyDkPdIMeKN7yjVSYNCdij8ufx1Kpk1i1RgIlzNUdH9zAO0lyCH5q6eHaRDwQBuY/BlCLc7Q5iZuW0fTkcz+UvQ+hMA++UMGh+gk2rq+89ZglZDuY8CC7zxxFuVD7pRdSE+tmoGwXi2HYmmZg0d0OYPhgI+MfnA+9vG+juLrYmHBWjyQrpQmXJecFzwWcKP3M0S9dLMSinHbfVyw7/2RG+vu3rBcDUYXjaghoTx8pVo7+wul+hr3+m7soG/RBaoV6nufCefu5pWyUbz4ZA==\u0026#34; } {\u0026#34;alipay_trade_refund_response\u0026#34;:{\u0026#34;code\u0026#34;:\u0026#34;10000\u0026#34;,\u0026#34;msg\u0026#34;:\u0026#34;Success\u0026#34;,\u0026#34;buyer_logon_id\u0026#34;:\u0026#34;xia***@gmail.com\u0026#34;,\u0026#34;buyer_user_id\u0026#34;:\u0026#34;2088202345875734\u0026#34;,\u0026#34;fund_change\u0026#34;:\u0026#34;Y\u0026#34;,\u0026#34;gmt_refund_pay\u0026#34;:\u0026#34;2022-12-12 12:45:08\u0026#34;,\u0026#34;out_trade_no\u0026#34;:\u0026#34;DH-O-2022-12-08-978069\u0026#34;,\u0026#34;refund_fee\u0026#34;:\u0026#34;0.04\u0026#34;,\u0026#34;send_back_fee\u0026#34;:\u0026#34;0.00\u0026#34;,\u0026#34;trade_no\u0026#34;:\u0026#34;2022121022001475731434706311\u0026#34;},\u0026#34;alipay_cert_sn\u0026#34;:\u0026#34;421f39ba4d8149cde08b15a426a12734\u0026#34;,\u0026#34;sign\u0026#34;:\u0026#34;aaEbzHRSRbPfWdbuJ7rLTNCVNXqILvp28F/8p7d85D9xEcDa45MwbxSJsb0gx7zARBvQZT9+SPPPLoCEyLO3hWmmxGe6vO7C2G0AcEDxOhjgOGOyd40SmmagV2UkcpdmW18Wxu8yUM3bwGcuL8HxX8MMruunmNmk77NIyW4oDE/9miNMsoeUucUGA79FvrfnY7Xs4XPloGLIHhmrasJfsMh5+TMk3hjncLs9SVBtKGtg1LlVwyUT88cA4uF8eWmSHVxQ3kPCdRqB4lV18u2xlSVw0eT1zZ9+1blm0BXoi16B21S4Jn+xqBIFqRAVt3OabIzfFF4J7NMgRnoWiDfXXQ==\u0026#34;} { \u0026#34;alipay_trade_refund_response\u0026#34;: { \u0026#34;code\u0026#34;: \u0026#34;40004\u0026#34;, \u0026#34;msg\u0026#34;: \u0026#34;Business Failed\u0026#34;, \u0026#34;sub_code\u0026#34;: \u0026#34;ACQ.DISCORDANT_REPEAT_REQUEST\u0026#34;, \u0026#34;sub_msg\u0026#34;: \u0026#34;退款金额不一致\u0026#34;, \u0026#34;refund_fee\u0026#34;: \u0026#34;0.00\u0026#34;, \u0026#34;send_back_fee\u0026#34;: \u0026#34;0.00\u0026#34; }, \u0026#34;alipay_cert_sn\u0026#34;: \u0026#34;421f39ba4d8149cde08b15a426a12734\u0026#34;, \u0026#34;sign\u0026#34;: \u0026#34;AbN/lkHQIYOqdfKkUo45fxsxCkiiq2+NLiOBaVrsoGp83ptbHFTZmHqRnFI7EzsKdkVQD1i5jP+5vUPLMpHqM6vTM8zMBco17BQhS2pqUZe8wVKBTKj2lalpbWurJNYIFgwt33Gl39c81YywtpXwzt/2oLoBnaj8CHlEioVVSof/USD8ikN/VwjllfinuiDjYKs7JB3MPk3275RPTSoP7tB8Vmz4Z0YD2b00txwxYa2S2w8pVS6/dAW5runCGws8o+GMgQqMw9Gpjuewt9DmhdbY+nUBo0wu4ojpUHA6ld9bDuhgH861WGvQz1pf1QXtYzV3kjDqyFsZU0OHVrKTfg==\u0026#34; } 测试 @Test public void aliRefund() throws Exception{ AlipayClient alipayClient = AlipayConfig.getAlipayClient(); AlipayTradeRefundRequest request = new AlipayTradeRefundRequest(); AlipayTradeRefundModel model = new AlipayTradeRefundModel(); String orderNo = \u0026#34;SO-20221208-978060\u0026#34;; model.setOutTradeNo(orderNo); model.setRefundAmount(\u0026#34;0.03\u0026#34;); model.setOutRequestNo(\u0026#34;HZ01RF004\u0026#34;); model.setRefundReason(\u0026#34;不想要了\u0026#34;); request.setBizModel(model); RdPayLog payLog = new RdPayLog(); payLog.setOrderId(orderNo); payLog.setPaytype(\u0026#34;支付宝退款\u0026#34;); payLog.setRequestParam(JSON.toJSONString(model)); try { AlipayTradeRefundResponse response = alipayClient.certificateExecute(request); payLog.setResponseParam(response.getBody()); if (!response.isSuccess()) { throw new BizException(response.getSubMsg()); } } catch (AlipayApiException e) { payLog.setResponseParam(e.getErrCode()+\u0026#34;===\u0026#34;+e.getErrMsg()); }finally { payLogMapper.insert(payLog); } } @Test public void wxRefund() { String orderNo = \u0026#34;SO-20221208-978060\u0026#34;; WxPayRefundRequest wxPayRefundRequest = new WxPayRefundRequest(); wxPayRefundRequest.setOutTradeNo(orderNo); wxPayRefundRequest.setOutRefundNo(\u0026#34;22222\u0026#34;); wxPayRefundRequest.setRefundFee(2); wxPayRefundRequest.setRefundDesc(\u0026#34;不好看 退货\u0026#34;); wxPayRefundRequest.setTotalFee(2100); RdPayLog payLog = new RdPayLog(); payLog.setOrderId(orderNo); payLog.setPaytype(\u0026#34;微信退款\u0026#34;); payLog.setRequestParam(wxPayRefundRequest.toXML()); try { WxPayRefundResult result = wxService.refund(wxPayRefundRequest); payLog.setResponseParam(result.getXmlString()); } catch (WxPayException e) { payLog.setResponseParam(e.getXmlString()); throw new BizException(e.getMessage()); }finally { payLogMapper.insert(payLog); } } ","permalink":"https://xiaoqiaotq.github.io/posts/misc/%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98_vs_%E6%94%AF%E4%BB%98%E5%AE%9D%E6%94%AF%E4%BB%98/","summary":"微信支付 https://pay.weixin.qq.com/wiki/doc/api/jsapi.php?chapter=9_4\nhttps://github.com/Wechat-Group/WxJava\nhttps://pay.weixin.qq.com/wiki/doc/api/wxa/wxa_api.php?chapter=2_2\n微信平台介绍：\n公众号平台 商户平台 开放平台 支付产品名字变更：\n公众号支付-变更为-JSAPI支付。 微信浏览器 扫码支付-变更为-Native支付 系统按微信支付协议生成支付二维码，非移动支付 刷卡支付-变更为-付款码支付 线下收银 APP支付。移动端sdk H5支付 移动浏览器，区分不同微信浏览器 小程序支付 小程序环境中支付 其他待应用 企业付款接口 ？ 付款到零钱-商户 付款到银行卡-商户 电子发票 合单支付 报关 https://api.mch.weixin.qq.com/v3/refund/domestic/refunds\n疑问 商户证书 vs 平台证书 （可以理解客户端和服务端） 证书过期问题（商户和平台），支付宝有提醒，微信无，过期需要开发手动替换 支付宝支付 https://opendocs.alipay.com/open/204/01dcc0?ref=api\n开放平台\nAlipayConfig\nCN=Ant Financial Certification Authority Class 1 R1, OU=Certification Authority, O=Ant Financial, C=CN CN=2088421377101215-2021002127627083, OU=Alipay, O=鸿海（苏州）食品科技股份有限公司, C=CN\nCN=支付宝(中国)网络技术有限公司-2088421377101215, OU=Alipay, O=鸿海（苏州）食品科技股份有限公司, C=CN CN=Ant Financial Certification Authority Class 2 R1, OU=Certification Authority, O=Ant Financial, C=CN CN=Ant Financial Certification Authority R1, OU=Certification Authority, O=Ant Financial, C=CN","title":"微信支付 👀️ 支付宝支付"},{"content":"事故现场 ### Error querying database. Cause: java.sql.SQLSyntaxErrorException: ORA-00933: SQL command not properly ended ### The error may exist in class path resource [mappers/scm/NCMapper.xml] ### The error may involve defaultParameterMap ### The error occurred while setting parameters ### SQL: select name,code from bd_customer where name like \u0026#39;%%\u0026#39; LIMIT ? ### Cause: java.sql.SQLSyntaxErrorException: ORA-00933: SQL command not properly ended ; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: ORA-00933: SQL command not properly ended at org.springframework.jdbc.support.SQLExceptionSubclassTranslator.doTranslate(SQLExceptionSubclassTranslator.java:91) at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:73) at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:82) at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:73) at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:446) at com.sun.proxy.$Proxy92.selectList(Unknown Source) at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:230) at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:139) at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:76) at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59) at com.sun.proxy.$Proxy187.findNCCustomerByKeyword(Unknown Source) at sun.reflect.GeneratedMethodAccessor1096.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:498) at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:333) at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:190) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:157) at com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationInterceptor.invoke(DynamicDataSourceAnnotationInterceptor.java:50) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179) at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:213) at com.sun.proxy.$Proxy188.findNCCustomerByKeyword(Unknown Source) at com.redsea.scm.controller.qc.QCController.ncCustomer(QCController.java:94) 自审 异常堆栈显示生成的sql不对，先说下背景，主数据源是mysql，副数据源是oracle，这个堆栈显示去查oracle数据库，但是用的分页是limit（mysql特有），说明生成分页语句有问题，带着这个疑问，想弄清楚分页mybaits插件是怎么实现的，为什么会选错数据源\n调用代码 # controller @GetMapping(value = \u0026#34;/aa\u0026#34;) public BaseResponse aa( String keyword, HttpServletRequest request){ PageHelper.startPage(1, 20); List customers = ncMapper.aa(keyword); return BaseResponse.success(customers); } # Mapper.java @DS(\u0026#34;NCdata\u0026#34;) public interface NCMapper { List\u0026lt;NCCustomer\u0026gt; aa(@Param(\u0026#34;k\u0026#34;) String keyword); } # mapper.xml \u0026lt;select id=\u0026#34;aa\u0026#34; \u0026gt; select name,code from bd_customer where name like \u0026#39;%${k}%\u0026#39; \u0026lt;/select\u0026gt; 代码很简单 Bug很奇葩 怀疑出问题的点 @Ds DynamicDataSourceAnnotationInterceptor有问题 PageHelper.startPage(1, 20); 调试源码 PageHelper.startPage(1, 20); public static \u0026lt;E\u0026gt; Page\u0026lt;E\u0026gt; startPage(int pageNum, int pageSize, boolean count, Boolean reasonable, Boolean pageSizeZero) { Page\u0026lt;E\u0026gt; page = new Page\u0026lt;E\u0026gt;(pageNum, pageSize, count); page.setReasonable(reasonable); page.setPageSizeZero(pageSizeZero); //当已经执行过orderBy的时候 Page\u0026lt;E\u0026gt; oldPage = getLocalPage(); if (oldPage != null \u0026amp;\u0026amp; oldPage.isOrderByOnly()) { page.setOrderBy(oldPage.getOrderBy()); } setLocalPage(page); return page; } protected static final ThreadLocal\u0026lt;Page\u0026gt; LOCAL_PAGE = new ThreadLocal\u0026lt;Page\u0026gt;(); protected static void setLocalPage(Page page) { LOCAL_PAGE.set(page); } PageInterceptor 调用 初始化dialet 插件配置 单一数据源配置 多数据源正确配置 结论 @ds 是aop实现 没有问题 PageHelper 可以管理多个数据源而实现分页，默认只支持缓存单个数据源 # 增加配置 pagehelper.auto-runtime-dialect=true 参考 https://pagehelper.github.io/docs/howtouse/ 感悟 发现问题排查源码是解决问题根本指导 官方配置多看几眼，有明确事例 ","permalink":"https://xiaoqiaotq.github.io/posts/java/%E6%95%B0%E6%8D%AE%E6%BA%90%E5%88%87%E6%8D%A2%E5%A4%B1%E6%95%88/","summary":"事故现场 ### Error querying database. Cause: java.sql.SQLSyntaxErrorException: ORA-00933: SQL command not properly ended ### The error may exist in class path resource [mappers/scm/NCMapper.xml] ### The error may involve defaultParameterMap ### The error occurred while setting parameters ### SQL: select name,code from bd_customer where name like \u0026#39;%%\u0026#39; LIMIT ? ### Cause: java.sql.SQLSyntaxErrorException: ORA-00933: SQL command not properly ended ; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: ORA-00933: SQL command not properly ended at org.","title":"记一次多数据源切换失效问题"},{"content":"reference https://www.madboa.com/geek/openssl\n常用命令 X509证书 # 等于cat alipay/alipayCertPublicKey_RSA2.crt openssl x509 -in alipay/alipayCertPublicKey_RSA2.crt # 格式化输出 openssl x509 -in alipay/alipayCertPublicKey_RSA2.crt -noout -text # 导出 public key openssl x509 -in ~/cert/wxpay/apiclient_cert.pem -pubkey -noout \u0026gt; public.pem 摘要 openssl md5 ~/Downloads/CertTrustChain.p7b openssl sha256 ~/Downloads/CertTrustChain.p7b p12 p12是个keystore，可以存放证书，私钥\n# 提取私钥 可能需要输入密码 openssl pkcs12 -in wxpay/apiclient_cert.p12 -out aa-key.pem -nocerts # 提取证书（证书带公钥） openssl pkcs12 -in wxpay/apiclient_cert.p12 -out aa.crt -clcerts -nokeys # 证书提取公钥 openssl x509 -in aa.crt -pubkey -noout \u0026gt; public.pem p7 证书信任链\n# 二进制der转化为 text openssl pkcs7 -in Downloads/CertTrustChain.p7b -inform der -print_certs -out chain.cer # 验证商户证书 最后的是叶子证书 openssl verify -CAfile chain.cer cert/wxpay/apiclient_cert.pem ","permalink":"https://xiaoqiaotq.github.io/posts/linux/openssl/","summary":"reference https://www.madboa.com/geek/openssl\n常用命令 X509证书 # 等于cat alipay/alipayCertPublicKey_RSA2.crt openssl x509 -in alipay/alipayCertPublicKey_RSA2.crt # 格式化输出 openssl x509 -in alipay/alipayCertPublicKey_RSA2.crt -noout -text # 导出 public key openssl x509 -in ~/cert/wxpay/apiclient_cert.pem -pubkey -noout \u0026gt; public.pem 摘要 openssl md5 ~/Downloads/CertTrustChain.p7b openssl sha256 ~/Downloads/CertTrustChain.p7b p12 p12是个keystore，可以存放证书，私钥\n# 提取私钥 可能需要输入密码 openssl pkcs12 -in wxpay/apiclient_cert.p12 -out aa-key.pem -nocerts # 提取证书（证书带公钥） openssl pkcs12 -in wxpay/apiclient_cert.p12 -out aa.crt -clcerts -nokeys # 证书提取公钥 openssl x509 -in aa.crt -pubkey -noout \u0026gt; public.pem p7 证书信任链","title":"Openssl"},{"content":"https://zh-hans.reactjs.org/docs/handling-events.html\nBabel 会把 JSX 转译成一个名为 React.createElement() 函数调用。\n组件名称必须以大写字母开头 React 会将以小写字母开头的组件视为原生 DOM 标签。例如，\u0026lt;div /\u0026gt; 代表 HTML 的 div 标签，而 \u0026lt;Welcome /\u0026gt; 则代表一个组件\nProps 的只读性 // Wrong this.setState({ counter: this.state.counter + this.props.increment, }); // Correct this.setState(function(state, props) { return { counter: state.counter + props.increment }; }); 事件 \u0026lt;button onClick={(e) =\u0026gt; this.deleteRow(id, e)}\u0026gt;Delete Row\u0026lt;/button\u0026gt; \u0026lt;button onClick={this.deleteRow.bind(this, id)}\u0026gt;Delete Row\u0026lt;/button\u0026gt; 条件渲染 与运算符 \u0026amp;\u0026amp; 三目运算符 The user is \u0026lt;b\u0026gt;{isLoggedIn ? \u0026#39;currently\u0026#39; : \u0026#39;not\u0026#39;}\u0026lt;/b\u0026gt; logged in. {isLoggedIn ? \u0026lt;LogoutButton onClick={this.handleLogoutClick} /\u0026gt; : \u0026lt;LoginButton onClick={this.handleLoginClick} /\u0026gt; } 阻止组件渲染 render直接 return null\n列表 \u0026amp; Key ","permalink":"https://xiaoqiaotq.github.io/posts/%E5%89%8D%E7%AB%AF/react/","summary":"https://zh-hans.reactjs.org/docs/handling-events.html\nBabel 会把 JSX 转译成一个名为 React.createElement() 函数调用。\n组件名称必须以大写字母开头 React 会将以小写字母开头的组件视为原生 DOM 标签。例如，\u0026lt;div /\u0026gt; 代表 HTML 的 div 标签，而 \u0026lt;Welcome /\u0026gt; 则代表一个组件\nProps 的只读性 // Wrong this.setState({ counter: this.state.counter + this.props.increment, }); // Correct this.setState(function(state, props) { return { counter: state.counter + props.increment }; }); 事件 \u0026lt;button onClick={(e) =\u0026gt; this.deleteRow(id, e)}\u0026gt;Delete Row\u0026lt;/button\u0026gt; \u0026lt;button onClick={this.deleteRow.bind(this, id)}\u0026gt;Delete Row\u0026lt;/button\u0026gt; 条件渲染 与运算符 \u0026amp;\u0026amp; 三目运算符 The user is \u0026lt;b\u0026gt;{isLoggedIn ? \u0026#39;currently\u0026#39; : \u0026#39;not\u0026#39;}\u0026lt;/b\u0026gt; logged in. {isLoggedIn ?","title":"React"},{"content":"技术选项 直接用Hugo 不要问我为什么\n安装 // 安装hugo brew install hugo // 检查是否安装成功，查看版本 hugo env 目录 启动 hugo new site xiaoqiaotq-blog cd xiaoqiaotq-blog git init # 官方sample theme git submodule add https://github.com/theNewDynamic/gohugo-theme-ananke themes/ananke echo \u0026#34;theme = \u0026#39;ananke\u0026#39;\u0026#34; \u0026gt;\u0026gt; config.toml # 本地测试预览 hugo server -D 添加gitignore\n# Generated files by hugo /public/ /resources/_gen/ /assets/jsconfig.json hugo_stats.json # Executable may be added to repository hugo.exe hugo.darwin hugo.linux # Temporary lock file while building /.hugo_build.lock .idea 主题 暂时找个个简单的,有时间在找 PaperMod https://adityatelange.github.io/hugo-PaperMod/\n部署到github page https://github.com/peaceiris/actions-hugo\ngithub 新建repository, xiaoqiaotq.github.io 关联远程remote ·git remote add origin master https://github.com/xiaoqiaotq/xiaoqiaotq.github.io.git 添加Action name: github pages on: push: branches: - main # Set a branch that will trigger a deployment pull_request: jobs: deploy: runs-on: ubuntu-22.04 steps: - uses: actions/checkout@v3 with: submodules: true # Fetch Hugo themes (true OR recursive) fetch-depth: 0 # Fetch all history for .GitInfo and .Lastmod - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: \u0026#39;latest\u0026#39; # extended: true - name: Build run: hugo --minify - name: Deploy uses: peaceiris/actions-gh-pages@v3 if: github.ref == \u0026#39;refs/heads/main\u0026#39; with: github_token: ${{ secrets.GITHUB_TOKEN }} publish_dir: ./public 贴下配置 config.yml baseURL: \u0026#34;https://xiaoqiaotq.github.io\u0026#34; languageCode: \u0026#34;zh-cn\u0026#34; title: \u0026#34;xiaoqiaotq\u0026#34; theme: \u0026#34;PaperMod\u0026#34; menu: main: - identifier: 分类 name: 分类 url: /categories/ weight: 10 - identifier: 标签 name: 标签 url: /tags/ weight: 20 # - identifier: example # name: example.org # url: https://example.org # weight: 30 # - identifier: home # name: 主页 # url: /posts/hom 访问 https://xiaoqiaotq.github.io\n参考 https://gohugo.io/getting-started/quick-start/\n","permalink":"https://xiaoqiaotq.github.io/posts/misc/blog%E5%8D%9A%E5%AE%A2%E6%90%9E%E8%B5%B7/","summary":"技术选项 直接用Hugo 不要问我为什么\n安装 // 安装hugo brew install hugo // 检查是否安装成功，查看版本 hugo env 目录 启动 hugo new site xiaoqiaotq-blog cd xiaoqiaotq-blog git init # 官方sample theme git submodule add https://github.com/theNewDynamic/gohugo-theme-ananke themes/ananke echo \u0026#34;theme = \u0026#39;ananke\u0026#39;\u0026#34; \u0026gt;\u0026gt; config.toml # 本地测试预览 hugo server -D 添加gitignore\n# Generated files by hugo /public/ /resources/_gen/ /assets/jsconfig.json hugo_stats.json # Executable may be added to repository hugo.exe hugo.darwin hugo.linux # Temporary lock file while building /.hugo_build.lock .idea 主题 暂时找个个简单的,有时间在找 PaperMod https://adityatelange.","title":"博客建站"}]